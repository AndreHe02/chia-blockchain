

(mod (mod-hash                ;; curried into puzzle
      lineage                 ;; curried in
      spender
      outputs
      extra-signers
      prev-coin-bundle        ;; used in this coin's announcement, prev-coin ASSERT_COIN_ANNOUNCEMENT will fail if wrong
      this-coin-bundle        ;; verified with ASSERT_MY_COIN_ID
      next-coin-bundle        ;; used to generate ASSERT_COIN_ANNOUNCEMENT
      prev-subtotal           ;; included in announcement, prev-coin ASSERT_COIN_ANNOUNCEMENT will fail if wrong
    )

     ;;;;; start library code

     (include condition_codes.clvm)

     (defmacro assert items
         (if (r items)
             (list if (f items) (c assert (r items)) (q . (x)))
             (f items)
         )
     )

     ;; utility function used by `curry_args`
     (defun fix_curry_args (items core)
       (if items
           (qq (c (q . (unquote (f items))) (unquote (fix_curry_args (r items) core))))
           core
       )
     )

     ; (curry_args sum (list 50 60)) => returns a function that is like (sum 50 60 ...)
     (defun curry_args (func list_of_args) (qq (a (q . (unquote func)) (unquote (fix_curry_args list_of_args (q . 1))))))

     ;; (curry sum 50 60) => returns a function that is like (sum 50 60 ...)
     (defun curry (func . args) (curry_args func args))

     (defun is-in-list (atom items)
       ;; returns 1 iff `atom` is in the list of `items`
       (if items
         (if (= atom (f items))
           1
           (is-in-list atom (r items))
         )
         0
       )
     )

     ;; hash a tree with escape values representing already-hashed subtrees
     ;; This optimization can be useful if you know the puzzle hash of a sub-expression.
     ;; You probably actually want to use `curry_and_hash` though.
     (defun sha256tree_esc_list
            (TREE LITERALS)
            (if (l TREE)
                (sha256 2 (sha256tree_esc_list (f TREE) LITERALS) (sha256tree_esc_list (r TREE) LITERALS))
                (if (is-in-list TREE LITERALS)
                    TREE
                    (sha256 1 TREE)
                )
            )
     )

     ;; hash a tree with escape values representing already-hashed subtrees
     ;; This optimization can be useful if you know the tree hash of a sub-expression.
     (defun sha256tree_esc
        (TREE . LITERAL)
        (sha256tree_esc_list TREE LITERAL)
     )

     ; takes a lisp tree and returns the hash of it
     (defun sha256tree1 (TREE)
           (if (l TREE)
               (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
               (sha256 1 TREE)))

     (defun-inline puzzle-hash-for-coin (coin)
        (f (r coin))
     )

     ;;;;; end library code

     (defun hc-puzzle-hash ((mod-hash mod-hash-hash lineage lineage-hash))
       (sha256tree_esc (curry mod-hash mod-hash-hash lineage-hash)
                       mod-hash
                       mod-hash-hash
                       lineage-hash)
     )

     ;; given a coin triplet, return the id of the coin
     (defun coin-id-for-coin ((parent-id puzzle-hash amount))
       (sha256 parent-id puzzle-hash amount)
     )

     ;; utility to fetch coin amount from coin
     (defun-inline input-amount-for-coin (coin)
       (f (r (r coin)))
     )

     ;; calculate the hash of an announcement
     (defun-inline calculate-annoucement-id (this-coin-info this-subtotal next-coin-info)
       ; NOTE: the next line containts a bug, as sha256tree1 ignores `this-subtotal`
       (sha256 (coin-id-for-coin next-coin-info) (sha256tree1 (list this-coin-info this-subtotal)))
     )

     ;; create the `ASSERT_COIN_ANNOUNCEMENT` condition that ensures the next coin's announcement is correct
     (defun-inline create-assert-next-announcement-condition (this-coin-info this-subtotal next-coin-info)
       (list ASSERT_COIN_ANNOUNCEMENT
             (calculate-annoucement-id this-coin-info
                                            this-subtotal
                                            next-coin-info
             )
       )
     )

     ;; here we commit to I_{k-1} and S_k
     (defun-inline create-announcement-condition (prev-coin-info prev-subtotal)
       (list CREATE_COIN_ANNOUNCEMENT
             (sha256tree1 (list prev-coin-info prev-subtotal))
       )
      )

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; this function takes a condition and returns an integer indicating
     ;; the value of all output coins created with CREATE_COIN. If it's not
     ;; a CREATE_COIN condition, it returns 0.

     (defun-inline output-value-for-condition (condition)
       (if (= (f condition) CREATE_COIN)
         (f (r (r condition)))
         0
       )
     )

     ;; this function takes a list of conditions and returns an integer indicating
     ;; the value of all output coins created with CREATE_COIN
     (defun output-totals (conditions)
       (if conditions
         (+ (output-value-for-condition (f conditions)) (output-totals (r conditions)))
         0
       )
     )

     ;; ensure `this-coin-info` is correct by creating the `ASSERT_MY_COIN_ID` condition
     (defun-inline create-assert-my-id (this-coin-info)
       (list ASSERT_MY_COIN_ID (coin-id-for-coin this-coin-info))
     )

     (defun-inline create-agg-sig-me (sig_parameters)
        (list AGG_SIG_ME (f sig_parameters) (f (r sig_parameters)))
     )

     ;; add three conditions to the list of morphed conditions:
     ;; ASSERT_MY_COIN_ID for `this-coin-info`
     ;; CREATE_COIN_ANNOUNCEMENT for my announcement
     ;; ASSERT_COIN_ANNOUNCEMENT for the next coin's announcement
     (defun-inline generate-final-output-conditions
       (
         prev-subtotal
         this-subtotal
         sig-parameters
         extra-signers
         inner-conditions
         prev-coin-info
         this-coin-info
         next-coin-info
       )
       (concat-after-list
          (make-extra-agg-sig-conditions extra-signers (f (r sig-parameters)))
          (c (create-agg-sig-me sig-parameters)
               (c (create-assert-my-id this-coin-info)
                 (c (create-announcement-condition prev-coin-info prev-subtotal)
                   (c (create-assert-next-announcement-condition this-coin-info this-subtotal next-coin-info)
                     inner-conditions
                   )
                 )
               )
          )
        )
      )

     (defun make-extra-agg-sig-conditions (extra-signers outputs)
        (if extra-signers
            (c
                (list AGG_SIG_ME (f extra-signers) outputs)
                (make-extra-agg-sig-conditions (r extra-signers) outputs)
            )
            ()
        )
     )

     (defun-inline is-lineage-proof-valid (
       lineage-proof-parameters coin-info)
         (= (hc-puzzle-hash lineage-proof-parameters) (puzzle-hash-for-coin coin-info))
     )

     (defun is-bundle-valid (coin lineage-proof-parameters)
       (is-lineage-proof-valid lineage-proof-parameters coin)
     )



     ;;;;;;;;;;;;;;;;;;;;;;;;;;;

     (defun main (
         lineage-proof-parameters
         sig-parameters
         inner-conditions
         extra-signers
         prev-coin-bundle
         this-coin-bundle
         next-coin-bundle
         prev-subtotal
      )
      (assert
        ; ensure prev is a cc (is this really necessary?)
        (is-bundle-valid prev-coin-bundle lineage-proof-parameters)

        ; ensure this is a cc (to ensure parent wasn't counterfeit)
        (is-bundle-valid this-coin-bundle lineage-proof-parameters)

        ; ensure next is a cc (to ensure its announcements can be trusted)
        (is-bundle-valid next-coin-bundle lineage-proof-parameters)

        (generate-final-output-conditions
          prev-subtotal
          ; the expression on the next line calculates `this-subtotal` by adding the delta to `prev-subtotal`
          (+ prev-subtotal (- (input-amount-for-coin this-coin-bundle) (output-totals inner-conditions)))
          sig-parameters
          extra-signers
          inner-conditions
          prev-coin-bundle
          this-coin-bundle
          next-coin-bundle
        )
      )
    )

    (defun get-spender-lineage (lineage spender depth)
        (if lineage
            (if (> 2 depth)
                (if (= (f lineage) spender)
                    (list )
                    (c (f lineage) (get-spender-lineage (r lineage) spender (+ depth 1)))
                )
                (x "not permitted to spend")    ;; third-hand owner (regular employee) is not permitted to spend
            )
            (x "invalid spender")   ;; no such owner
        )
    )

    (defun append-to-list (list item)
        (if list
            (c (f list) (append-to-list (r list) item))
            (list item)
        )
    )

    (defun last-item (ls)
        (if (r ls)
            (last-item (r ls))
            (f ls)
        )
    )

    (defun concat-after-list (ls1 ls2)
        (if ls1
            (c (f ls1) (concat-after-list (r ls1) ls2))
            ls2
        )
    )


    (defun helper-make-condition (mod-hash output-lineage amount)
        (list CREATE_COIN
              (hc-puzzle-hash (list mod-hash (sha256tree1 mod-hash) output-lineage (sha256tree1 output-lineage)))
              amount
        )
    )

    (defun make-condition (mod-hash spender-lineage (receiver-chain . amount))
        (helper-make-condition mod-hash (concat-after-list spender-lineage receiver-chain) amount)
    )

    (defun helper-make-conditions (mod-hash spender-lineage outputs)
        (if outputs
            (c
                (make-condition mod-hash spender-lineage (f outputs))
                (helper-make-conditions mod-hash spender-lineage (r outputs))
            )
            ()
        )
    )

    (defun make-conditions (mod-hash lineage spender outputs)
         ;; is this a normal spend or clawback?
         (if (= spender (last-item lineage))
            ;; normal spend
            (helper-make-conditions mod-hash (get-spender-lineage lineage spender 0) outputs)
            ;; clawback. was it by the admin?
            (if (= spender (f lineage))
                ;; yes, normal spend (requires admin signature anyway, don't repeat the agg-sig-me condition)
                (helper-make-conditions mod-hash (get-spender-lineage lineage spender 0) outputs)
                ;; no, require admin signature
                (c (list AGG_SIG_ME (f lineage) (sha256tree1 outputs))  ; no, require admin signature
                    (helper-make-conditions mod-hash (get-spender-lineage lineage spender 0) outputs)
                )
            )
        )
    )

    (main
        (list mod-hash (sha256tree1 mod-hash) lineage (sha256tree1 lineage))
        (list spender (sha256tree1 outputs))
        (make-conditions mod-hash lineage spender outputs)
        extra-signers
        prev-coin-bundle
        this-coin-bundle
        next-coin-bundle
        prev-subtotal
    )
)
